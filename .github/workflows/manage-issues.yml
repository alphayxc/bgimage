name: Manage Issues

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  check-issue-creator:
    runs-on: ubuntu-latest
    steps:
      - name: Check if issue creator is authorized
        uses: actions/github-script@v7
        with:
          script: |
            // Define authorized users list (including repository owner)
            const authorizedUsers = [
              context.repo.owner, // Repository owner
              // Add other authorized GitHub usernames here
              // 'username1',
              // 'username2',
            ];

            const issueCreator = context.payload.issue.user.login;
            const isAuthorized = authorizedUsers.includes(issueCreator);

            console.log(`Issue creator: ${issueCreator}`);
            console.log(`Authorized users: ${authorizedUsers.join(', ')}`);
            console.log(`Is authorized: ${isAuthorized}`);

            if (!isAuthorized) {
              // Close and lock issue immediately to prevent further operations
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                state: 'closed'
              });

              // Lock issue to prevent comments
              await github.rest.issues.lock({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                lock_reason: 'off-topic'
              });

              // Add explanation comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: [
                  'üö´ **Unauthorized Issue Creation**',
                  '',
                  'This repository only allows administrators to create new Issues.',
                  '',
                  '**How to participate:**',
                  '- üí¨ Comment on existing Issues for discussion',
                  '- üëç Like content you find interesting',
                  '- üç¥ Fork the repository for your own development',
                  '',
                  'This Issue will be automatically closed and locked.'
                ].join('\n')
              });

              console.log('Unauthorized issue has been closed and locked.');
            } else {
              console.log(`Authorized user ${issueCreator} created an issue. Keeping it open.`);
            }
